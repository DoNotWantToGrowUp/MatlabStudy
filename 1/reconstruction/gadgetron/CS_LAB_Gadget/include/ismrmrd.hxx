// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_MAD_ISMRMRD_CODE_BUILD_SCHEMA_ISMRMRD_HXX
#define CXX_HOME_MAD_ISMRMRD_CODE_BUILD_SCHEMA_ISMRMRD_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace ISMRMRD
{
  class ismrmrdHeader;
  class subjectInformationType;
  class studyInformationType;
  class measurementInformationType;
  class measurementDependencyType;
  class acquisitionSystemInformationType;
  class experimentalConditionsType;
  class encoding;
  class encodingSpaceType;
  class matrixSize;
  class fieldOfView_mm;
  class limitType;
  class encodingLimitsType;
  class trajectoryType;
  class trajectoryDescriptionType;
  class sequenceParametersType;
  class userParameterLongType;
  class userParameterDoubleType;
  class userParameterStringType;
  class userParameterBase64Type;
  class dicomParametersType;
  class referencedImageSequence;
  class MRImageModule;
  class userParameters;
  class accelerationFactorType;
  class calibrationModeType;
  class interleavingDimensionType;
  class parallelImagingType;
  class patientGender;
  class patientPosition;
  class freqEncodingDirection;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace ISMRMRD
{
  class ismrmrdHeader: public ::xml_schema::type
  {
    public:
    // subjectInformation
    // 
    typedef ::ISMRMRD::subjectInformationType subjectInformation_type;
    typedef ::xsd::cxx::tree::optional< subjectInformation_type > subjectInformation_optional;
    typedef ::xsd::cxx::tree::traits< subjectInformation_type, char > subjectInformation_traits;

    const subjectInformation_optional&
    subjectInformation () const;

    subjectInformation_optional&
    subjectInformation ();

    void
    subjectInformation (const subjectInformation_type& x);

    void
    subjectInformation (const subjectInformation_optional& x);

    void
    subjectInformation (::std::auto_ptr< subjectInformation_type > p);

    // studyInformation
    // 
    typedef ::ISMRMRD::studyInformationType studyInformation_type;
    typedef ::xsd::cxx::tree::optional< studyInformation_type > studyInformation_optional;
    typedef ::xsd::cxx::tree::traits< studyInformation_type, char > studyInformation_traits;

    const studyInformation_optional&
    studyInformation () const;

    studyInformation_optional&
    studyInformation ();

    void
    studyInformation (const studyInformation_type& x);

    void
    studyInformation (const studyInformation_optional& x);

    void
    studyInformation (::std::auto_ptr< studyInformation_type > p);

    // measurementInformation
    // 
    typedef ::ISMRMRD::measurementInformationType measurementInformation_type;
    typedef ::xsd::cxx::tree::optional< measurementInformation_type > measurementInformation_optional;
    typedef ::xsd::cxx::tree::traits< measurementInformation_type, char > measurementInformation_traits;

    const measurementInformation_optional&
    measurementInformation () const;

    measurementInformation_optional&
    measurementInformation ();

    void
    measurementInformation (const measurementInformation_type& x);

    void
    measurementInformation (const measurementInformation_optional& x);

    void
    measurementInformation (::std::auto_ptr< measurementInformation_type > p);

    // acquisitionSystemInformation
    // 
    typedef ::ISMRMRD::acquisitionSystemInformationType acquisitionSystemInformation_type;
    typedef ::xsd::cxx::tree::optional< acquisitionSystemInformation_type > acquisitionSystemInformation_optional;
    typedef ::xsd::cxx::tree::traits< acquisitionSystemInformation_type, char > acquisitionSystemInformation_traits;

    const acquisitionSystemInformation_optional&
    acquisitionSystemInformation () const;

    acquisitionSystemInformation_optional&
    acquisitionSystemInformation ();

    void
    acquisitionSystemInformation (const acquisitionSystemInformation_type& x);

    void
    acquisitionSystemInformation (const acquisitionSystemInformation_optional& x);

    void
    acquisitionSystemInformation (::std::auto_ptr< acquisitionSystemInformation_type > p);

    // experimentalConditions
    // 
    typedef ::ISMRMRD::experimentalConditionsType experimentalConditions_type;
    typedef ::xsd::cxx::tree::traits< experimentalConditions_type, char > experimentalConditions_traits;

    const experimentalConditions_type&
    experimentalConditions () const;

    experimentalConditions_type&
    experimentalConditions ();

    void
    experimentalConditions (const experimentalConditions_type& x);

    void
    experimentalConditions (::std::auto_ptr< experimentalConditions_type > p);

    // encoding
    // 
    typedef ::ISMRMRD::encoding encoding_type;
    typedef ::xsd::cxx::tree::sequence< encoding_type > encoding_sequence;
    typedef encoding_sequence::iterator encoding_iterator;
    typedef encoding_sequence::const_iterator encoding_const_iterator;
    typedef ::xsd::cxx::tree::traits< encoding_type, char > encoding_traits;

    const encoding_sequence&
    encoding () const;

    encoding_sequence&
    encoding ();

    void
    encoding (const encoding_sequence& s);

    // parallelImaging
    // 
    typedef ::ISMRMRD::parallelImagingType parallelImaging_type;
    typedef ::xsd::cxx::tree::optional< parallelImaging_type > parallelImaging_optional;
    typedef ::xsd::cxx::tree::traits< parallelImaging_type, char > parallelImaging_traits;

    const parallelImaging_optional&
    parallelImaging () const;

    parallelImaging_optional&
    parallelImaging ();

    void
    parallelImaging (const parallelImaging_type& x);

    void
    parallelImaging (const parallelImaging_optional& x);

    void
    parallelImaging (::std::auto_ptr< parallelImaging_type > p);

    // sequenceParameters
    // 
    typedef ::ISMRMRD::sequenceParametersType sequenceParameters_type;
    typedef ::xsd::cxx::tree::optional< sequenceParameters_type > sequenceParameters_optional;
    typedef ::xsd::cxx::tree::traits< sequenceParameters_type, char > sequenceParameters_traits;

    const sequenceParameters_optional&
    sequenceParameters () const;

    sequenceParameters_optional&
    sequenceParameters ();

    void
    sequenceParameters (const sequenceParameters_type& x);

    void
    sequenceParameters (const sequenceParameters_optional& x);

    void
    sequenceParameters (::std::auto_ptr< sequenceParameters_type > p);

    // dicomParameters
    // 
    typedef ::ISMRMRD::dicomParametersType dicomParameters_type;
    typedef ::xsd::cxx::tree::optional< dicomParameters_type > dicomParameters_optional;
    typedef ::xsd::cxx::tree::traits< dicomParameters_type, char > dicomParameters_traits;

    const dicomParameters_optional&
    dicomParameters () const;

    dicomParameters_optional&
    dicomParameters ();

    void
    dicomParameters (const dicomParameters_type& x);

    void
    dicomParameters (const dicomParameters_optional& x);

    void
    dicomParameters (::std::auto_ptr< dicomParameters_type > p);

    // userParameters
    // 
    typedef ::ISMRMRD::userParameters userParameters_type;
    typedef ::xsd::cxx::tree::optional< userParameters_type > userParameters_optional;
    typedef ::xsd::cxx::tree::traits< userParameters_type, char > userParameters_traits;

    const userParameters_optional&
    userParameters () const;

    userParameters_optional&
    userParameters ();

    void
    userParameters (const userParameters_type& x);

    void
    userParameters (const userParameters_optional& x);

    void
    userParameters (::std::auto_ptr< userParameters_type > p);

    // Constructors.
    //
    ismrmrdHeader (const experimentalConditions_type&);

    ismrmrdHeader (::std::auto_ptr< experimentalConditions_type >&);

    ismrmrdHeader (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ismrmrdHeader (const ismrmrdHeader& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual ismrmrdHeader*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ismrmrdHeader ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    subjectInformation_optional subjectInformation_;
    studyInformation_optional studyInformation_;
    measurementInformation_optional measurementInformation_;
    acquisitionSystemInformation_optional acquisitionSystemInformation_;
    ::xsd::cxx::tree::one< experimentalConditions_type > experimentalConditions_;
    encoding_sequence encoding_;
    parallelImaging_optional parallelImaging_;
    sequenceParameters_optional sequenceParameters_;
    dicomParameters_optional dicomParameters_;
    userParameters_optional userParameters_;
  };

  class subjectInformationType: public ::xml_schema::type
  {
    public:
    // patientName
    // 
    typedef ::xml_schema::string patientName_type;
    typedef ::xsd::cxx::tree::optional< patientName_type > patientName_optional;
    typedef ::xsd::cxx::tree::traits< patientName_type, char > patientName_traits;

    const patientName_optional&
    patientName () const;

    patientName_optional&
    patientName ();

    void
    patientName (const patientName_type& x);

    void
    patientName (const patientName_optional& x);

    void
    patientName (::std::auto_ptr< patientName_type > p);

    // patientWeight_kg
    // 
    typedef ::xml_schema::float_ patientWeight_kg_type;
    typedef ::xsd::cxx::tree::optional< patientWeight_kg_type > patientWeight_kg_optional;
    typedef ::xsd::cxx::tree::traits< patientWeight_kg_type, char > patientWeight_kg_traits;

    const patientWeight_kg_optional&
    patientWeight_kg () const;

    patientWeight_kg_optional&
    patientWeight_kg ();

    void
    patientWeight_kg (const patientWeight_kg_type& x);

    void
    patientWeight_kg (const patientWeight_kg_optional& x);

    // patientID
    // 
    typedef ::xml_schema::string patientID_type;
    typedef ::xsd::cxx::tree::optional< patientID_type > patientID_optional;
    typedef ::xsd::cxx::tree::traits< patientID_type, char > patientID_traits;

    const patientID_optional&
    patientID () const;

    patientID_optional&
    patientID ();

    void
    patientID (const patientID_type& x);

    void
    patientID (const patientID_optional& x);

    void
    patientID (::std::auto_ptr< patientID_type > p);

    // patientBirthdate
    // 
    typedef ::xml_schema::date patientBirthdate_type;
    typedef ::xsd::cxx::tree::optional< patientBirthdate_type > patientBirthdate_optional;
    typedef ::xsd::cxx::tree::traits< patientBirthdate_type, char > patientBirthdate_traits;

    const patientBirthdate_optional&
    patientBirthdate () const;

    patientBirthdate_optional&
    patientBirthdate ();

    void
    patientBirthdate (const patientBirthdate_type& x);

    void
    patientBirthdate (const patientBirthdate_optional& x);

    void
    patientBirthdate (::std::auto_ptr< patientBirthdate_type > p);

    // patientGender
    // 
    typedef ::ISMRMRD::patientGender patientGender_type;
    typedef ::xsd::cxx::tree::optional< patientGender_type > patientGender_optional;
    typedef ::xsd::cxx::tree::traits< patientGender_type, char > patientGender_traits;

    const patientGender_optional&
    patientGender () const;

    patientGender_optional&
    patientGender ();

    void
    patientGender (const patientGender_type& x);

    void
    patientGender (const patientGender_optional& x);

    void
    patientGender (::std::auto_ptr< patientGender_type > p);

    // Constructors.
    //
    subjectInformationType ();

    subjectInformationType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    subjectInformationType (const subjectInformationType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual subjectInformationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~subjectInformationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    patientName_optional patientName_;
    patientWeight_kg_optional patientWeight_kg_;
    patientID_optional patientID_;
    patientBirthdate_optional patientBirthdate_;
    patientGender_optional patientGender_;
  };

  class studyInformationType: public ::xml_schema::type
  {
    public:
    // studyDate
    // 
    typedef ::xml_schema::date studyDate_type;
    typedef ::xsd::cxx::tree::optional< studyDate_type > studyDate_optional;
    typedef ::xsd::cxx::tree::traits< studyDate_type, char > studyDate_traits;

    const studyDate_optional&
    studyDate () const;

    studyDate_optional&
    studyDate ();

    void
    studyDate (const studyDate_type& x);

    void
    studyDate (const studyDate_optional& x);

    void
    studyDate (::std::auto_ptr< studyDate_type > p);

    // studyTime
    // 
    typedef ::xml_schema::time studyTime_type;
    typedef ::xsd::cxx::tree::optional< studyTime_type > studyTime_optional;
    typedef ::xsd::cxx::tree::traits< studyTime_type, char > studyTime_traits;

    const studyTime_optional&
    studyTime () const;

    studyTime_optional&
    studyTime ();

    void
    studyTime (const studyTime_type& x);

    void
    studyTime (const studyTime_optional& x);

    void
    studyTime (::std::auto_ptr< studyTime_type > p);

    // studyID
    // 
    typedef ::xml_schema::string studyID_type;
    typedef ::xsd::cxx::tree::optional< studyID_type > studyID_optional;
    typedef ::xsd::cxx::tree::traits< studyID_type, char > studyID_traits;

    const studyID_optional&
    studyID () const;

    studyID_optional&
    studyID ();

    void
    studyID (const studyID_type& x);

    void
    studyID (const studyID_optional& x);

    void
    studyID (::std::auto_ptr< studyID_type > p);

    // accessionNumber
    // 
    typedef ::xml_schema::long_ accessionNumber_type;
    typedef ::xsd::cxx::tree::optional< accessionNumber_type > accessionNumber_optional;
    typedef ::xsd::cxx::tree::traits< accessionNumber_type, char > accessionNumber_traits;

    const accessionNumber_optional&
    accessionNumber () const;

    accessionNumber_optional&
    accessionNumber ();

    void
    accessionNumber (const accessionNumber_type& x);

    void
    accessionNumber (const accessionNumber_optional& x);

    // referringPhysicianName
    // 
    typedef ::xml_schema::string referringPhysicianName_type;
    typedef ::xsd::cxx::tree::optional< referringPhysicianName_type > referringPhysicianName_optional;
    typedef ::xsd::cxx::tree::traits< referringPhysicianName_type, char > referringPhysicianName_traits;

    const referringPhysicianName_optional&
    referringPhysicianName () const;

    referringPhysicianName_optional&
    referringPhysicianName ();

    void
    referringPhysicianName (const referringPhysicianName_type& x);

    void
    referringPhysicianName (const referringPhysicianName_optional& x);

    void
    referringPhysicianName (::std::auto_ptr< referringPhysicianName_type > p);

    // studyDescription
    // 
    typedef ::xml_schema::string studyDescription_type;
    typedef ::xsd::cxx::tree::optional< studyDescription_type > studyDescription_optional;
    typedef ::xsd::cxx::tree::traits< studyDescription_type, char > studyDescription_traits;

    const studyDescription_optional&
    studyDescription () const;

    studyDescription_optional&
    studyDescription ();

    void
    studyDescription (const studyDescription_type& x);

    void
    studyDescription (const studyDescription_optional& x);

    void
    studyDescription (::std::auto_ptr< studyDescription_type > p);

    // Constructors.
    //
    studyInformationType ();

    studyInformationType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    studyInformationType (const studyInformationType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual studyInformationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~studyInformationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    studyDate_optional studyDate_;
    studyTime_optional studyTime_;
    studyID_optional studyID_;
    accessionNumber_optional accessionNumber_;
    referringPhysicianName_optional referringPhysicianName_;
    studyDescription_optional studyDescription_;
  };

  class measurementInformationType: public ::xml_schema::type
  {
    public:
    // measurementID
    // 
    typedef ::xml_schema::string measurementID_type;
    typedef ::xsd::cxx::tree::optional< measurementID_type > measurementID_optional;
    typedef ::xsd::cxx::tree::traits< measurementID_type, char > measurementID_traits;

    const measurementID_optional&
    measurementID () const;

    measurementID_optional&
    measurementID ();

    void
    measurementID (const measurementID_type& x);

    void
    measurementID (const measurementID_optional& x);

    void
    measurementID (::std::auto_ptr< measurementID_type > p);

    // seriesDate
    // 
    typedef ::xml_schema::date seriesDate_type;
    typedef ::xsd::cxx::tree::optional< seriesDate_type > seriesDate_optional;
    typedef ::xsd::cxx::tree::traits< seriesDate_type, char > seriesDate_traits;

    const seriesDate_optional&
    seriesDate () const;

    seriesDate_optional&
    seriesDate ();

    void
    seriesDate (const seriesDate_type& x);

    void
    seriesDate (const seriesDate_optional& x);

    void
    seriesDate (::std::auto_ptr< seriesDate_type > p);

    // seriesTime
    // 
    typedef ::xml_schema::time seriesTime_type;
    typedef ::xsd::cxx::tree::optional< seriesTime_type > seriesTime_optional;
    typedef ::xsd::cxx::tree::traits< seriesTime_type, char > seriesTime_traits;

    const seriesTime_optional&
    seriesTime () const;

    seriesTime_optional&
    seriesTime ();

    void
    seriesTime (const seriesTime_type& x);

    void
    seriesTime (const seriesTime_optional& x);

    void
    seriesTime (::std::auto_ptr< seriesTime_type > p);

    // patientPosition
    // 
    typedef ::ISMRMRD::patientPosition patientPosition_type;
    typedef ::xsd::cxx::tree::traits< patientPosition_type, char > patientPosition_traits;

    const patientPosition_type&
    patientPosition () const;

    patientPosition_type&
    patientPosition ();

    void
    patientPosition (const patientPosition_type& x);

    void
    patientPosition (::std::auto_ptr< patientPosition_type > p);

    // initialSeriesNumber
    // 
    typedef ::xml_schema::long_ initialSeriesNumber_type;
    typedef ::xsd::cxx::tree::optional< initialSeriesNumber_type > initialSeriesNumber_optional;
    typedef ::xsd::cxx::tree::traits< initialSeriesNumber_type, char > initialSeriesNumber_traits;

    const initialSeriesNumber_optional&
    initialSeriesNumber () const;

    initialSeriesNumber_optional&
    initialSeriesNumber ();

    void
    initialSeriesNumber (const initialSeriesNumber_type& x);

    void
    initialSeriesNumber (const initialSeriesNumber_optional& x);

    // protocolName
    // 
    typedef ::xml_schema::string protocolName_type;
    typedef ::xsd::cxx::tree::optional< protocolName_type > protocolName_optional;
    typedef ::xsd::cxx::tree::traits< protocolName_type, char > protocolName_traits;

    const protocolName_optional&
    protocolName () const;

    protocolName_optional&
    protocolName ();

    void
    protocolName (const protocolName_type& x);

    void
    protocolName (const protocolName_optional& x);

    void
    protocolName (::std::auto_ptr< protocolName_type > p);

    // seriesDescription
    // 
    typedef ::xml_schema::string seriesDescription_type;
    typedef ::xsd::cxx::tree::optional< seriesDescription_type > seriesDescription_optional;
    typedef ::xsd::cxx::tree::traits< seriesDescription_type, char > seriesDescription_traits;

    const seriesDescription_optional&
    seriesDescription () const;

    seriesDescription_optional&
    seriesDescription ();

    void
    seriesDescription (const seriesDescription_type& x);

    void
    seriesDescription (const seriesDescription_optional& x);

    void
    seriesDescription (::std::auto_ptr< seriesDescription_type > p);

    // measurementDependency
    // 
    typedef ::ISMRMRD::measurementDependencyType measurementDependency_type;
    typedef ::xsd::cxx::tree::sequence< measurementDependency_type > measurementDependency_sequence;
    typedef measurementDependency_sequence::iterator measurementDependency_iterator;
    typedef measurementDependency_sequence::const_iterator measurementDependency_const_iterator;
    typedef ::xsd::cxx::tree::traits< measurementDependency_type, char > measurementDependency_traits;

    const measurementDependency_sequence&
    measurementDependency () const;

    measurementDependency_sequence&
    measurementDependency ();

    void
    measurementDependency (const measurementDependency_sequence& s);

    // Constructors.
    //
    measurementInformationType (const patientPosition_type&);

    measurementInformationType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    measurementInformationType (const measurementInformationType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual measurementInformationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~measurementInformationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    measurementID_optional measurementID_;
    seriesDate_optional seriesDate_;
    seriesTime_optional seriesTime_;
    ::xsd::cxx::tree::one< patientPosition_type > patientPosition_;
    initialSeriesNumber_optional initialSeriesNumber_;
    protocolName_optional protocolName_;
    seriesDescription_optional seriesDescription_;
    measurementDependency_sequence measurementDependency_;
  };

  class measurementDependencyType: public ::xml_schema::type
  {
    public:
    // dependencyType
    // 
    typedef ::xml_schema::string dependencyType_type;
    typedef ::xsd::cxx::tree::traits< dependencyType_type, char > dependencyType_traits;

    const dependencyType_type&
    dependencyType () const;

    dependencyType_type&
    dependencyType ();

    void
    dependencyType (const dependencyType_type& x);

    void
    dependencyType (::std::auto_ptr< dependencyType_type > p);

    // measurementID
    // 
    typedef ::xml_schema::string measurementID_type;
    typedef ::xsd::cxx::tree::traits< measurementID_type, char > measurementID_traits;

    const measurementID_type&
    measurementID () const;

    measurementID_type&
    measurementID ();

    void
    measurementID (const measurementID_type& x);

    void
    measurementID (::std::auto_ptr< measurementID_type > p);

    // Constructors.
    //
    measurementDependencyType (const dependencyType_type&,
                               const measurementID_type&);

    measurementDependencyType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    measurementDependencyType (const measurementDependencyType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual measurementDependencyType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~measurementDependencyType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< dependencyType_type > dependencyType_;
    ::xsd::cxx::tree::one< measurementID_type > measurementID_;
  };

  class acquisitionSystemInformationType: public ::xml_schema::type
  {
    public:
    // systemVendor
    // 
    typedef ::xml_schema::string systemVendor_type;
    typedef ::xsd::cxx::tree::optional< systemVendor_type > systemVendor_optional;
    typedef ::xsd::cxx::tree::traits< systemVendor_type, char > systemVendor_traits;

    const systemVendor_optional&
    systemVendor () const;

    systemVendor_optional&
    systemVendor ();

    void
    systemVendor (const systemVendor_type& x);

    void
    systemVendor (const systemVendor_optional& x);

    void
    systemVendor (::std::auto_ptr< systemVendor_type > p);

    // systemModel
    // 
    typedef ::xml_schema::string systemModel_type;
    typedef ::xsd::cxx::tree::optional< systemModel_type > systemModel_optional;
    typedef ::xsd::cxx::tree::traits< systemModel_type, char > systemModel_traits;

    const systemModel_optional&
    systemModel () const;

    systemModel_optional&
    systemModel ();

    void
    systemModel (const systemModel_type& x);

    void
    systemModel (const systemModel_optional& x);

    void
    systemModel (::std::auto_ptr< systemModel_type > p);

    // systemFieldStrength_T
    // 
    typedef ::xml_schema::float_ systemFieldStrength_T_type;
    typedef ::xsd::cxx::tree::optional< systemFieldStrength_T_type > systemFieldStrength_T_optional;
    typedef ::xsd::cxx::tree::traits< systemFieldStrength_T_type, char > systemFieldStrength_T_traits;

    const systemFieldStrength_T_optional&
    systemFieldStrength_T () const;

    systemFieldStrength_T_optional&
    systemFieldStrength_T ();

    void
    systemFieldStrength_T (const systemFieldStrength_T_type& x);

    void
    systemFieldStrength_T (const systemFieldStrength_T_optional& x);

    // relativeReceiverNoiseBandwidth
    // 
    typedef ::xml_schema::float_ relativeReceiverNoiseBandwidth_type;
    typedef ::xsd::cxx::tree::optional< relativeReceiverNoiseBandwidth_type > relativeReceiverNoiseBandwidth_optional;
    typedef ::xsd::cxx::tree::traits< relativeReceiverNoiseBandwidth_type, char > relativeReceiverNoiseBandwidth_traits;

    const relativeReceiverNoiseBandwidth_optional&
    relativeReceiverNoiseBandwidth () const;

    relativeReceiverNoiseBandwidth_optional&
    relativeReceiverNoiseBandwidth ();

    void
    relativeReceiverNoiseBandwidth (const relativeReceiverNoiseBandwidth_type& x);

    void
    relativeReceiverNoiseBandwidth (const relativeReceiverNoiseBandwidth_optional& x);

    // receiverChannels
    // 
    typedef ::xml_schema::unsigned_short receiverChannels_type;
    typedef ::xsd::cxx::tree::optional< receiverChannels_type > receiverChannels_optional;
    typedef ::xsd::cxx::tree::traits< receiverChannels_type, char > receiverChannels_traits;

    const receiverChannels_optional&
    receiverChannels () const;

    receiverChannels_optional&
    receiverChannels ();

    void
    receiverChannels (const receiverChannels_type& x);

    void
    receiverChannels (const receiverChannels_optional& x);

    // institutionName
    // 
    typedef ::xml_schema::string institutionName_type;
    typedef ::xsd::cxx::tree::optional< institutionName_type > institutionName_optional;
    typedef ::xsd::cxx::tree::traits< institutionName_type, char > institutionName_traits;

    const institutionName_optional&
    institutionName () const;

    institutionName_optional&
    institutionName ();

    void
    institutionName (const institutionName_type& x);

    void
    institutionName (const institutionName_optional& x);

    void
    institutionName (::std::auto_ptr< institutionName_type > p);

    // stationName
    // 
    typedef ::xml_schema::string stationName_type;
    typedef ::xsd::cxx::tree::optional< stationName_type > stationName_optional;
    typedef ::xsd::cxx::tree::traits< stationName_type, char > stationName_traits;

    const stationName_optional&
    stationName () const;

    stationName_optional&
    stationName ();

    void
    stationName (const stationName_type& x);

    void
    stationName (const stationName_optional& x);

    void
    stationName (::std::auto_ptr< stationName_type > p);

    // Constructors.
    //
    acquisitionSystemInformationType ();

    acquisitionSystemInformationType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    acquisitionSystemInformationType (const acquisitionSystemInformationType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    virtual acquisitionSystemInformationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~acquisitionSystemInformationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    systemVendor_optional systemVendor_;
    systemModel_optional systemModel_;
    systemFieldStrength_T_optional systemFieldStrength_T_;
    relativeReceiverNoiseBandwidth_optional relativeReceiverNoiseBandwidth_;
    receiverChannels_optional receiverChannels_;
    institutionName_optional institutionName_;
    stationName_optional stationName_;
  };

  class experimentalConditionsType: public ::xml_schema::type
  {
    public:
    // H1resonanceFrequency_Hz
    // 
    typedef ::xml_schema::long_ H1resonanceFrequency_Hz_type;
    typedef ::xsd::cxx::tree::traits< H1resonanceFrequency_Hz_type, char > H1resonanceFrequency_Hz_traits;

    const H1resonanceFrequency_Hz_type&
    H1resonanceFrequency_Hz () const;

    H1resonanceFrequency_Hz_type&
    H1resonanceFrequency_Hz ();

    void
    H1resonanceFrequency_Hz (const H1resonanceFrequency_Hz_type& x);

    // Constructors.
    //
    experimentalConditionsType (const H1resonanceFrequency_Hz_type&);

    experimentalConditionsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    experimentalConditionsType (const experimentalConditionsType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual experimentalConditionsType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~experimentalConditionsType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< H1resonanceFrequency_Hz_type > H1resonanceFrequency_Hz_;
  };

  class encoding: public ::xml_schema::type
  {
    public:
    // encodedSpace
    // 
    typedef ::ISMRMRD::encodingSpaceType encodedSpace_type;
    typedef ::xsd::cxx::tree::traits< encodedSpace_type, char > encodedSpace_traits;

    const encodedSpace_type&
    encodedSpace () const;

    encodedSpace_type&
    encodedSpace ();

    void
    encodedSpace (const encodedSpace_type& x);

    void
    encodedSpace (::std::auto_ptr< encodedSpace_type > p);

    // reconSpace
    // 
    typedef ::ISMRMRD::encodingSpaceType reconSpace_type;
    typedef ::xsd::cxx::tree::traits< reconSpace_type, char > reconSpace_traits;

    const reconSpace_type&
    reconSpace () const;

    reconSpace_type&
    reconSpace ();

    void
    reconSpace (const reconSpace_type& x);

    void
    reconSpace (::std::auto_ptr< reconSpace_type > p);

    // encodingLimits
    // 
    typedef ::ISMRMRD::encodingLimitsType encodingLimits_type;
    typedef ::xsd::cxx::tree::traits< encodingLimits_type, char > encodingLimits_traits;

    const encodingLimits_type&
    encodingLimits () const;

    encodingLimits_type&
    encodingLimits ();

    void
    encodingLimits (const encodingLimits_type& x);

    void
    encodingLimits (::std::auto_ptr< encodingLimits_type > p);

    // trajectory
    // 
    typedef ::ISMRMRD::trajectoryType trajectory_type;
    typedef ::xsd::cxx::tree::traits< trajectory_type, char > trajectory_traits;

    const trajectory_type&
    trajectory () const;

    trajectory_type&
    trajectory ();

    void
    trajectory (const trajectory_type& x);

    void
    trajectory (::std::auto_ptr< trajectory_type > p);

    // trajectoryDescription
    // 
    typedef ::ISMRMRD::trajectoryDescriptionType trajectoryDescription_type;
    typedef ::xsd::cxx::tree::optional< trajectoryDescription_type > trajectoryDescription_optional;
    typedef ::xsd::cxx::tree::traits< trajectoryDescription_type, char > trajectoryDescription_traits;

    const trajectoryDescription_optional&
    trajectoryDescription () const;

    trajectoryDescription_optional&
    trajectoryDescription ();

    void
    trajectoryDescription (const trajectoryDescription_type& x);

    void
    trajectoryDescription (const trajectoryDescription_optional& x);

    void
    trajectoryDescription (::std::auto_ptr< trajectoryDescription_type > p);

    // Constructors.
    //
    encoding (const encodedSpace_type&,
              const reconSpace_type&,
              const encodingLimits_type&,
              const trajectory_type&);

    encoding (::std::auto_ptr< encodedSpace_type >&,
              ::std::auto_ptr< reconSpace_type >&,
              ::std::auto_ptr< encodingLimits_type >&,
              const trajectory_type&);

    encoding (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    encoding (const encoding& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual encoding*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~encoding ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< encodedSpace_type > encodedSpace_;
    ::xsd::cxx::tree::one< reconSpace_type > reconSpace_;
    ::xsd::cxx::tree::one< encodingLimits_type > encodingLimits_;
    ::xsd::cxx::tree::one< trajectory_type > trajectory_;
    trajectoryDescription_optional trajectoryDescription_;
  };

  class encodingSpaceType: public ::xml_schema::type
  {
    public:
    // matrixSize
    // 
    typedef ::ISMRMRD::matrixSize matrixSize_type;
    typedef ::xsd::cxx::tree::traits< matrixSize_type, char > matrixSize_traits;

    const matrixSize_type&
    matrixSize () const;

    matrixSize_type&
    matrixSize ();

    void
    matrixSize (const matrixSize_type& x);

    void
    matrixSize (::std::auto_ptr< matrixSize_type > p);

    // fieldOfView_mm
    // 
    typedef ::ISMRMRD::fieldOfView_mm fieldOfView_mm_type;
    typedef ::xsd::cxx::tree::traits< fieldOfView_mm_type, char > fieldOfView_mm_traits;

    const fieldOfView_mm_type&
    fieldOfView_mm () const;

    fieldOfView_mm_type&
    fieldOfView_mm ();

    void
    fieldOfView_mm (const fieldOfView_mm_type& x);

    void
    fieldOfView_mm (::std::auto_ptr< fieldOfView_mm_type > p);

    // Constructors.
    //
    encodingSpaceType (const matrixSize_type&,
                       const fieldOfView_mm_type&);

    encodingSpaceType (::std::auto_ptr< matrixSize_type >&,
                       ::std::auto_ptr< fieldOfView_mm_type >&);

    encodingSpaceType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    encodingSpaceType (const encodingSpaceType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual encodingSpaceType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~encodingSpaceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< matrixSize_type > matrixSize_;
    ::xsd::cxx::tree::one< fieldOfView_mm_type > fieldOfView_mm_;
  };

  class matrixSize: public ::xml_schema::type
  {
    public:
    // x
    // 
    typedef ::xml_schema::unsigned_short x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    static x_type
    x_default_value ();

    // y
    // 
    typedef ::xml_schema::unsigned_short y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    static y_type
    y_default_value ();

    // z
    // 
    typedef ::xml_schema::unsigned_short z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    static z_type
    z_default_value ();

    // Constructors.
    //
    matrixSize (const x_type&,
                const y_type&,
                const z_type&);

    matrixSize (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    matrixSize (const matrixSize& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual matrixSize*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~matrixSize ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class fieldOfView_mm: public ::xml_schema::type
  {
    public:
    // x
    // 
    typedef ::xml_schema::float_ x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    // y
    // 
    typedef ::xml_schema::float_ y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    // z
    // 
    typedef ::xml_schema::float_ z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    // Constructors.
    //
    fieldOfView_mm (const x_type&,
                    const y_type&,
                    const z_type&);

    fieldOfView_mm (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    fieldOfView_mm (const fieldOfView_mm& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual fieldOfView_mm*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~fieldOfView_mm ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class limitType: public ::xml_schema::type
  {
    public:
    // minimum
    // 
    typedef ::xml_schema::unsigned_short minimum_type;
    typedef ::xsd::cxx::tree::traits< minimum_type, char > minimum_traits;

    const minimum_type&
    minimum () const;

    minimum_type&
    minimum ();

    void
    minimum (const minimum_type& x);

    static minimum_type
    minimum_default_value ();

    // maximum
    // 
    typedef ::xml_schema::unsigned_short maximum_type;
    typedef ::xsd::cxx::tree::traits< maximum_type, char > maximum_traits;

    const maximum_type&
    maximum () const;

    maximum_type&
    maximum ();

    void
    maximum (const maximum_type& x);

    static maximum_type
    maximum_default_value ();

    // center
    // 
    typedef ::xml_schema::unsigned_short center_type;
    typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

    const center_type&
    center () const;

    center_type&
    center ();

    void
    center (const center_type& x);

    static center_type
    center_default_value ();

    // Constructors.
    //
    limitType (const minimum_type&,
               const maximum_type&,
               const center_type&);

    limitType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    limitType (const limitType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual limitType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~limitType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< minimum_type > minimum_;
    ::xsd::cxx::tree::one< maximum_type > maximum_;
    ::xsd::cxx::tree::one< center_type > center_;
  };

  class encodingLimitsType: public ::xml_schema::type
  {
    public:
    // kspace_encoding_step_0
    // 
    typedef ::ISMRMRD::limitType kspace_encoding_step_0_type;
    typedef ::xsd::cxx::tree::optional< kspace_encoding_step_0_type > kspace_encoding_step_0_optional;
    typedef ::xsd::cxx::tree::traits< kspace_encoding_step_0_type, char > kspace_encoding_step_0_traits;

    const kspace_encoding_step_0_optional&
    kspace_encoding_step_0 () const;

    kspace_encoding_step_0_optional&
    kspace_encoding_step_0 ();

    void
    kspace_encoding_step_0 (const kspace_encoding_step_0_type& x);

    void
    kspace_encoding_step_0 (const kspace_encoding_step_0_optional& x);

    void
    kspace_encoding_step_0 (::std::auto_ptr< kspace_encoding_step_0_type > p);

    // kspace_encoding_step_1
    // 
    typedef ::ISMRMRD::limitType kspace_encoding_step_1_type;
    typedef ::xsd::cxx::tree::optional< kspace_encoding_step_1_type > kspace_encoding_step_1_optional;
    typedef ::xsd::cxx::tree::traits< kspace_encoding_step_1_type, char > kspace_encoding_step_1_traits;

    const kspace_encoding_step_1_optional&
    kspace_encoding_step_1 () const;

    kspace_encoding_step_1_optional&
    kspace_encoding_step_1 ();

    void
    kspace_encoding_step_1 (const kspace_encoding_step_1_type& x);

    void
    kspace_encoding_step_1 (const kspace_encoding_step_1_optional& x);

    void
    kspace_encoding_step_1 (::std::auto_ptr< kspace_encoding_step_1_type > p);

    // kspace_encoding_step_2
    // 
    typedef ::ISMRMRD::limitType kspace_encoding_step_2_type;
    typedef ::xsd::cxx::tree::optional< kspace_encoding_step_2_type > kspace_encoding_step_2_optional;
    typedef ::xsd::cxx::tree::traits< kspace_encoding_step_2_type, char > kspace_encoding_step_2_traits;

    const kspace_encoding_step_2_optional&
    kspace_encoding_step_2 () const;

    kspace_encoding_step_2_optional&
    kspace_encoding_step_2 ();

    void
    kspace_encoding_step_2 (const kspace_encoding_step_2_type& x);

    void
    kspace_encoding_step_2 (const kspace_encoding_step_2_optional& x);

    void
    kspace_encoding_step_2 (::std::auto_ptr< kspace_encoding_step_2_type > p);

    // average
    // 
    typedef ::ISMRMRD::limitType average_type;
    typedef ::xsd::cxx::tree::optional< average_type > average_optional;
    typedef ::xsd::cxx::tree::traits< average_type, char > average_traits;

    const average_optional&
    average () const;

    average_optional&
    average ();

    void
    average (const average_type& x);

    void
    average (const average_optional& x);

    void
    average (::std::auto_ptr< average_type > p);

    // slice
    // 
    typedef ::ISMRMRD::limitType slice_type;
    typedef ::xsd::cxx::tree::optional< slice_type > slice_optional;
    typedef ::xsd::cxx::tree::traits< slice_type, char > slice_traits;

    const slice_optional&
    slice () const;

    slice_optional&
    slice ();

    void
    slice (const slice_type& x);

    void
    slice (const slice_optional& x);

    void
    slice (::std::auto_ptr< slice_type > p);

    // contrast
    // 
    typedef ::ISMRMRD::limitType contrast_type;
    typedef ::xsd::cxx::tree::optional< contrast_type > contrast_optional;
    typedef ::xsd::cxx::tree::traits< contrast_type, char > contrast_traits;

    const contrast_optional&
    contrast () const;

    contrast_optional&
    contrast ();

    void
    contrast (const contrast_type& x);

    void
    contrast (const contrast_optional& x);

    void
    contrast (::std::auto_ptr< contrast_type > p);

    // phase
    // 
    typedef ::ISMRMRD::limitType phase_type;
    typedef ::xsd::cxx::tree::optional< phase_type > phase_optional;
    typedef ::xsd::cxx::tree::traits< phase_type, char > phase_traits;

    const phase_optional&
    phase () const;

    phase_optional&
    phase ();

    void
    phase (const phase_type& x);

    void
    phase (const phase_optional& x);

    void
    phase (::std::auto_ptr< phase_type > p);

    // repetition
    // 
    typedef ::ISMRMRD::limitType repetition_type;
    typedef ::xsd::cxx::tree::optional< repetition_type > repetition_optional;
    typedef ::xsd::cxx::tree::traits< repetition_type, char > repetition_traits;

    const repetition_optional&
    repetition () const;

    repetition_optional&
    repetition ();

    void
    repetition (const repetition_type& x);

    void
    repetition (const repetition_optional& x);

    void
    repetition (::std::auto_ptr< repetition_type > p);

    // set
    // 
    typedef ::ISMRMRD::limitType set_type;
    typedef ::xsd::cxx::tree::optional< set_type > set_optional;
    typedef ::xsd::cxx::tree::traits< set_type, char > set_traits;

    const set_optional&
    set () const;

    set_optional&
    set ();

    void
    set (const set_type& x);

    void
    set (const set_optional& x);

    void
    set (::std::auto_ptr< set_type > p);

    // segment
    // 
    typedef ::ISMRMRD::limitType segment_type;
    typedef ::xsd::cxx::tree::optional< segment_type > segment_optional;
    typedef ::xsd::cxx::tree::traits< segment_type, char > segment_traits;

    const segment_optional&
    segment () const;

    segment_optional&
    segment ();

    void
    segment (const segment_type& x);

    void
    segment (const segment_optional& x);

    void
    segment (::std::auto_ptr< segment_type > p);

    // Constructors.
    //
    encodingLimitsType ();

    encodingLimitsType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    encodingLimitsType (const encodingLimitsType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual encodingLimitsType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~encodingLimitsType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    kspace_encoding_step_0_optional kspace_encoding_step_0_;
    kspace_encoding_step_1_optional kspace_encoding_step_1_;
    kspace_encoding_step_2_optional kspace_encoding_step_2_;
    average_optional average_;
    slice_optional slice_;
    contrast_optional contrast_;
    phase_optional phase_;
    repetition_optional repetition_;
    set_optional set_;
    segment_optional segment_;
  };

  class trajectoryType: public ::xml_schema::string
  {
    public:
    enum value
    {
      cartesian,
      epi,
      radial,
      goldenangle,
      spiral,
      other
    };

    trajectoryType (value v);

    trajectoryType (const char* v);

    trajectoryType (const ::std::string& v);

    trajectoryType (const ::xml_schema::string& v);

    trajectoryType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    trajectoryType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    trajectoryType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    trajectoryType (const trajectoryType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual trajectoryType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    trajectoryType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_trajectoryType_convert ();
    }

    protected:
    value
    _xsd_trajectoryType_convert () const;

    public:
    static const char* const _xsd_trajectoryType_literals_[6];
    static const value _xsd_trajectoryType_indexes_[6];
  };

  class trajectoryDescriptionType: public ::xml_schema::type
  {
    public:
    // identifier
    // 
    typedef ::xml_schema::string identifier_type;
    typedef ::xsd::cxx::tree::traits< identifier_type, char > identifier_traits;

    const identifier_type&
    identifier () const;

    identifier_type&
    identifier ();

    void
    identifier (const identifier_type& x);

    void
    identifier (::std::auto_ptr< identifier_type > p);

    // userParameterLong
    // 
    typedef ::ISMRMRD::userParameterLongType userParameterLong_type;
    typedef ::xsd::cxx::tree::sequence< userParameterLong_type > userParameterLong_sequence;
    typedef userParameterLong_sequence::iterator userParameterLong_iterator;
    typedef userParameterLong_sequence::const_iterator userParameterLong_const_iterator;
    typedef ::xsd::cxx::tree::traits< userParameterLong_type, char > userParameterLong_traits;

    const userParameterLong_sequence&
    userParameterLong () const;

    userParameterLong_sequence&
    userParameterLong ();

    void
    userParameterLong (const userParameterLong_sequence& s);

    // userParameterDouble
    // 
    typedef ::ISMRMRD::userParameterDoubleType userParameterDouble_type;
    typedef ::xsd::cxx::tree::sequence< userParameterDouble_type > userParameterDouble_sequence;
    typedef userParameterDouble_sequence::iterator userParameterDouble_iterator;
    typedef userParameterDouble_sequence::const_iterator userParameterDouble_const_iterator;
    typedef ::xsd::cxx::tree::traits< userParameterDouble_type, char > userParameterDouble_traits;

    const userParameterDouble_sequence&
    userParameterDouble () const;

    userParameterDouble_sequence&
    userParameterDouble ();

    void
    userParameterDouble (const userParameterDouble_sequence& s);

    // comment
    // 
    typedef ::xml_schema::string comment_type;
    typedef ::xsd::cxx::tree::optional< comment_type > comment_optional;
    typedef ::xsd::cxx::tree::traits< comment_type, char > comment_traits;

    const comment_optional&
    comment () const;

    comment_optional&
    comment ();

    void
    comment (const comment_type& x);

    void
    comment (const comment_optional& x);

    void
    comment (::std::auto_ptr< comment_type > p);

    // Constructors.
    //
    trajectoryDescriptionType (const identifier_type&);

    trajectoryDescriptionType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    trajectoryDescriptionType (const trajectoryDescriptionType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual trajectoryDescriptionType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~trajectoryDescriptionType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< identifier_type > identifier_;
    userParameterLong_sequence userParameterLong_;
    userParameterDouble_sequence userParameterDouble_;
    comment_optional comment_;
  };

  class sequenceParametersType: public ::xml_schema::type
  {
    public:
    // TR
    // 
    typedef ::xml_schema::float_ TR_type;
    typedef ::xsd::cxx::tree::sequence< TR_type > TR_sequence;
    typedef TR_sequence::iterator TR_iterator;
    typedef TR_sequence::const_iterator TR_const_iterator;
    typedef ::xsd::cxx::tree::traits< TR_type, char > TR_traits;

    const TR_sequence&
    TR () const;

    TR_sequence&
    TR ();

    void
    TR (const TR_sequence& s);

    // TE
    // 
    typedef ::xml_schema::float_ TE_type;
    typedef ::xsd::cxx::tree::sequence< TE_type > TE_sequence;
    typedef TE_sequence::iterator TE_iterator;
    typedef TE_sequence::const_iterator TE_const_iterator;
    typedef ::xsd::cxx::tree::traits< TE_type, char > TE_traits;

    const TE_sequence&
    TE () const;

    TE_sequence&
    TE ();

    void
    TE (const TE_sequence& s);

    // TI
    // 
    typedef ::xml_schema::float_ TI_type;
    typedef ::xsd::cxx::tree::sequence< TI_type > TI_sequence;
    typedef TI_sequence::iterator TI_iterator;
    typedef TI_sequence::const_iterator TI_const_iterator;
    typedef ::xsd::cxx::tree::traits< TI_type, char > TI_traits;

    const TI_sequence&
    TI () const;

    TI_sequence&
    TI ();

    void
    TI (const TI_sequence& s);

    // Constructors.
    //
    sequenceParametersType ();

    sequenceParametersType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    sequenceParametersType (const sequenceParametersType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual sequenceParametersType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~sequenceParametersType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    TR_sequence TR_;
    TE_sequence TE_;
    TI_sequence TI_;
  };

  class userParameterLongType: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // value
    // 
    typedef ::xml_schema::long_ value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    // Constructors.
    //
    userParameterLongType (const name_type&,
                           const value_type&);

    userParameterLongType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    userParameterLongType (const userParameterLongType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual userParameterLongType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~userParameterLongType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class userParameterDoubleType: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // value
    // 
    typedef ::xml_schema::double_ value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char, ::xsd::cxx::tree::schema_type::double_ > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    // Constructors.
    //
    userParameterDoubleType (const name_type&,
                             const value_type&);

    userParameterDoubleType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    userParameterDoubleType (const userParameterDoubleType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual userParameterDoubleType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~userParameterDoubleType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class userParameterStringType: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // value
    // 
    typedef ::xml_schema::string value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    userParameterStringType (const name_type&,
                             const value_type&);

    userParameterStringType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    userParameterStringType (const userParameterStringType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual userParameterStringType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~userParameterStringType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class userParameterBase64Type: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // value
    // 
    typedef ::xml_schema::base64_binary value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    userParameterBase64Type (const name_type&,
                             const value_type&);

    userParameterBase64Type (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    userParameterBase64Type (const userParameterBase64Type& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual userParameterBase64Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~userParameterBase64Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class dicomParametersType: public ::xml_schema::type
  {
    public:
    // studyInstanceUID
    // 
    typedef ::xml_schema::string studyInstanceUID_type;
    typedef ::xsd::cxx::tree::traits< studyInstanceUID_type, char > studyInstanceUID_traits;

    const studyInstanceUID_type&
    studyInstanceUID () const;

    studyInstanceUID_type&
    studyInstanceUID ();

    void
    studyInstanceUID (const studyInstanceUID_type& x);

    void
    studyInstanceUID (::std::auto_ptr< studyInstanceUID_type > p);

    // seriesInstanceUIDRoot
    // 
    typedef ::xml_schema::string seriesInstanceUIDRoot_type;
    typedef ::xsd::cxx::tree::optional< seriesInstanceUIDRoot_type > seriesInstanceUIDRoot_optional;
    typedef ::xsd::cxx::tree::traits< seriesInstanceUIDRoot_type, char > seriesInstanceUIDRoot_traits;

    const seriesInstanceUIDRoot_optional&
    seriesInstanceUIDRoot () const;

    seriesInstanceUIDRoot_optional&
    seriesInstanceUIDRoot ();

    void
    seriesInstanceUIDRoot (const seriesInstanceUIDRoot_type& x);

    void
    seriesInstanceUIDRoot (const seriesInstanceUIDRoot_optional& x);

    void
    seriesInstanceUIDRoot (::std::auto_ptr< seriesInstanceUIDRoot_type > p);

    // frameOfReferenceUID
    // 
    typedef ::xml_schema::string frameOfReferenceUID_type;
    typedef ::xsd::cxx::tree::optional< frameOfReferenceUID_type > frameOfReferenceUID_optional;
    typedef ::xsd::cxx::tree::traits< frameOfReferenceUID_type, char > frameOfReferenceUID_traits;

    const frameOfReferenceUID_optional&
    frameOfReferenceUID () const;

    frameOfReferenceUID_optional&
    frameOfReferenceUID ();

    void
    frameOfReferenceUID (const frameOfReferenceUID_type& x);

    void
    frameOfReferenceUID (const frameOfReferenceUID_optional& x);

    void
    frameOfReferenceUID (::std::auto_ptr< frameOfReferenceUID_type > p);

    // referencedImageSequence
    // 
    typedef ::ISMRMRD::referencedImageSequence referencedImageSequence_type;
    typedef ::xsd::cxx::tree::optional< referencedImageSequence_type > referencedImageSequence_optional;
    typedef ::xsd::cxx::tree::traits< referencedImageSequence_type, char > referencedImageSequence_traits;

    const referencedImageSequence_optional&
    referencedImageSequence () const;

    referencedImageSequence_optional&
    referencedImageSequence ();

    void
    referencedImageSequence (const referencedImageSequence_type& x);

    void
    referencedImageSequence (const referencedImageSequence_optional& x);

    void
    referencedImageSequence (::std::auto_ptr< referencedImageSequence_type > p);

    // MRImageModule
    // 
    typedef ::ISMRMRD::MRImageModule MRImageModule_type;
    typedef ::xsd::cxx::tree::optional< MRImageModule_type > MRImageModule_optional;
    typedef ::xsd::cxx::tree::traits< MRImageModule_type, char > MRImageModule_traits;

    const MRImageModule_optional&
    MRImageModule () const;

    MRImageModule_optional&
    MRImageModule ();

    void
    MRImageModule (const MRImageModule_type& x);

    void
    MRImageModule (const MRImageModule_optional& x);

    void
    MRImageModule (::std::auto_ptr< MRImageModule_type > p);

    // Constructors.
    //
    dicomParametersType (const studyInstanceUID_type&);

    dicomParametersType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    dicomParametersType (const dicomParametersType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual dicomParametersType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~dicomParametersType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< studyInstanceUID_type > studyInstanceUID_;
    seriesInstanceUIDRoot_optional seriesInstanceUIDRoot_;
    frameOfReferenceUID_optional frameOfReferenceUID_;
    referencedImageSequence_optional referencedImageSequence_;
    MRImageModule_optional MRImageModule_;
  };

  class referencedImageSequence: public ::xml_schema::type
  {
    public:
    // referencedSOPInstanceUID
    // 
    typedef ::xml_schema::string referencedSOPInstanceUID_type;
    typedef ::xsd::cxx::tree::sequence< referencedSOPInstanceUID_type > referencedSOPInstanceUID_sequence;
    typedef referencedSOPInstanceUID_sequence::iterator referencedSOPInstanceUID_iterator;
    typedef referencedSOPInstanceUID_sequence::const_iterator referencedSOPInstanceUID_const_iterator;
    typedef ::xsd::cxx::tree::traits< referencedSOPInstanceUID_type, char > referencedSOPInstanceUID_traits;

    const referencedSOPInstanceUID_sequence&
    referencedSOPInstanceUID () const;

    referencedSOPInstanceUID_sequence&
    referencedSOPInstanceUID ();

    void
    referencedSOPInstanceUID (const referencedSOPInstanceUID_sequence& s);

    // Constructors.
    //
    referencedImageSequence ();

    referencedImageSequence (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    referencedImageSequence (const referencedImageSequence& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual referencedImageSequence*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~referencedImageSequence ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    referencedSOPInstanceUID_sequence referencedSOPInstanceUID_;
  };

  class MRImageModule: public ::xml_schema::type
  {
    public:
    // imageType
    // 
    typedef ::xml_schema::string imageType_type;
    typedef ::xsd::cxx::tree::optional< imageType_type > imageType_optional;
    typedef ::xsd::cxx::tree::traits< imageType_type, char > imageType_traits;

    const imageType_optional&
    imageType () const;

    imageType_optional&
    imageType ();

    void
    imageType (const imageType_type& x);

    void
    imageType (const imageType_optional& x);

    void
    imageType (::std::auto_ptr< imageType_type > p);

    // scanningSequence
    // 
    typedef ::xml_schema::string scanningSequence_type;
    typedef ::xsd::cxx::tree::optional< scanningSequence_type > scanningSequence_optional;
    typedef ::xsd::cxx::tree::traits< scanningSequence_type, char > scanningSequence_traits;

    const scanningSequence_optional&
    scanningSequence () const;

    scanningSequence_optional&
    scanningSequence ();

    void
    scanningSequence (const scanningSequence_type& x);

    void
    scanningSequence (const scanningSequence_optional& x);

    void
    scanningSequence (::std::auto_ptr< scanningSequence_type > p);

    // sequenceVariant
    // 
    typedef ::xml_schema::string sequenceVariant_type;
    typedef ::xsd::cxx::tree::optional< sequenceVariant_type > sequenceVariant_optional;
    typedef ::xsd::cxx::tree::traits< sequenceVariant_type, char > sequenceVariant_traits;

    const sequenceVariant_optional&
    sequenceVariant () const;

    sequenceVariant_optional&
    sequenceVariant ();

    void
    sequenceVariant (const sequenceVariant_type& x);

    void
    sequenceVariant (const sequenceVariant_optional& x);

    void
    sequenceVariant (::std::auto_ptr< sequenceVariant_type > p);

    // scanOptions
    // 
    typedef ::xml_schema::string scanOptions_type;
    typedef ::xsd::cxx::tree::optional< scanOptions_type > scanOptions_optional;
    typedef ::xsd::cxx::tree::traits< scanOptions_type, char > scanOptions_traits;

    const scanOptions_optional&
    scanOptions () const;

    scanOptions_optional&
    scanOptions ();

    void
    scanOptions (const scanOptions_type& x);

    void
    scanOptions (const scanOptions_optional& x);

    void
    scanOptions (::std::auto_ptr< scanOptions_type > p);

    // mrAcquisitionType
    // 
    typedef ::xml_schema::string mrAcquisitionType_type;
    typedef ::xsd::cxx::tree::optional< mrAcquisitionType_type > mrAcquisitionType_optional;
    typedef ::xsd::cxx::tree::traits< mrAcquisitionType_type, char > mrAcquisitionType_traits;

    const mrAcquisitionType_optional&
    mrAcquisitionType () const;

    mrAcquisitionType_optional&
    mrAcquisitionType ();

    void
    mrAcquisitionType (const mrAcquisitionType_type& x);

    void
    mrAcquisitionType (const mrAcquisitionType_optional& x);

    void
    mrAcquisitionType (::std::auto_ptr< mrAcquisitionType_type > p);

    // echoTrainLength
    // 
    typedef ::xml_schema::long_ echoTrainLength_type;
    typedef ::xsd::cxx::tree::optional< echoTrainLength_type > echoTrainLength_optional;
    typedef ::xsd::cxx::tree::traits< echoTrainLength_type, char > echoTrainLength_traits;

    const echoTrainLength_optional&
    echoTrainLength () const;

    echoTrainLength_optional&
    echoTrainLength ();

    void
    echoTrainLength (const echoTrainLength_type& x);

    void
    echoTrainLength (const echoTrainLength_optional& x);

    // triggerTime
    // 
    typedef ::xml_schema::float_ triggerTime_type;
    typedef ::xsd::cxx::tree::optional< triggerTime_type > triggerTime_optional;
    typedef ::xsd::cxx::tree::traits< triggerTime_type, char > triggerTime_traits;

    const triggerTime_optional&
    triggerTime () const;

    triggerTime_optional&
    triggerTime ();

    void
    triggerTime (const triggerTime_type& x);

    void
    triggerTime (const triggerTime_optional& x);

    // flipAngle_deg
    // 
    typedef ::xml_schema::float_ flipAngle_deg_type;
    typedef ::xsd::cxx::tree::optional< flipAngle_deg_type > flipAngle_deg_optional;
    typedef ::xsd::cxx::tree::traits< flipAngle_deg_type, char > flipAngle_deg_traits;

    const flipAngle_deg_optional&
    flipAngle_deg () const;

    flipAngle_deg_optional&
    flipAngle_deg ();

    void
    flipAngle_deg (const flipAngle_deg_type& x);

    void
    flipAngle_deg (const flipAngle_deg_optional& x);

    // freqEncodingDirection
    // 
    typedef ::ISMRMRD::freqEncodingDirection freqEncodingDirection_type;
    typedef ::xsd::cxx::tree::optional< freqEncodingDirection_type > freqEncodingDirection_optional;
    typedef ::xsd::cxx::tree::traits< freqEncodingDirection_type, char > freqEncodingDirection_traits;

    const freqEncodingDirection_optional&
    freqEncodingDirection () const;

    freqEncodingDirection_optional&
    freqEncodingDirection ();

    void
    freqEncodingDirection (const freqEncodingDirection_type& x);

    void
    freqEncodingDirection (const freqEncodingDirection_optional& x);

    void
    freqEncodingDirection (::std::auto_ptr< freqEncodingDirection_type > p);

    // Constructors.
    //
    MRImageModule ();

    MRImageModule (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    MRImageModule (const MRImageModule& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual MRImageModule*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~MRImageModule ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    imageType_optional imageType_;
    scanningSequence_optional scanningSequence_;
    sequenceVariant_optional sequenceVariant_;
    scanOptions_optional scanOptions_;
    mrAcquisitionType_optional mrAcquisitionType_;
    echoTrainLength_optional echoTrainLength_;
    triggerTime_optional triggerTime_;
    flipAngle_deg_optional flipAngle_deg_;
    freqEncodingDirection_optional freqEncodingDirection_;
  };

  class userParameters: public ::xml_schema::type
  {
    public:
    // userParameterLong
    // 
    typedef ::ISMRMRD::userParameterLongType userParameterLong_type;
    typedef ::xsd::cxx::tree::sequence< userParameterLong_type > userParameterLong_sequence;
    typedef userParameterLong_sequence::iterator userParameterLong_iterator;
    typedef userParameterLong_sequence::const_iterator userParameterLong_const_iterator;
    typedef ::xsd::cxx::tree::traits< userParameterLong_type, char > userParameterLong_traits;

    const userParameterLong_sequence&
    userParameterLong () const;

    userParameterLong_sequence&
    userParameterLong ();

    void
    userParameterLong (const userParameterLong_sequence& s);

    // userParameterDouble
    // 
    typedef ::ISMRMRD::userParameterDoubleType userParameterDouble_type;
    typedef ::xsd::cxx::tree::sequence< userParameterDouble_type > userParameterDouble_sequence;
    typedef userParameterDouble_sequence::iterator userParameterDouble_iterator;
    typedef userParameterDouble_sequence::const_iterator userParameterDouble_const_iterator;
    typedef ::xsd::cxx::tree::traits< userParameterDouble_type, char > userParameterDouble_traits;

    const userParameterDouble_sequence&
    userParameterDouble () const;

    userParameterDouble_sequence&
    userParameterDouble ();

    void
    userParameterDouble (const userParameterDouble_sequence& s);

    // userParameterString
    // 
    typedef ::ISMRMRD::userParameterStringType userParameterString_type;
    typedef ::xsd::cxx::tree::sequence< userParameterString_type > userParameterString_sequence;
    typedef userParameterString_sequence::iterator userParameterString_iterator;
    typedef userParameterString_sequence::const_iterator userParameterString_const_iterator;
    typedef ::xsd::cxx::tree::traits< userParameterString_type, char > userParameterString_traits;

    const userParameterString_sequence&
    userParameterString () const;

    userParameterString_sequence&
    userParameterString ();

    void
    userParameterString (const userParameterString_sequence& s);

    // userParameterBase64
    // 
    typedef ::ISMRMRD::userParameterBase64Type userParameterBase64_type;
    typedef ::xsd::cxx::tree::sequence< userParameterBase64_type > userParameterBase64_sequence;
    typedef userParameterBase64_sequence::iterator userParameterBase64_iterator;
    typedef userParameterBase64_sequence::const_iterator userParameterBase64_const_iterator;
    typedef ::xsd::cxx::tree::traits< userParameterBase64_type, char > userParameterBase64_traits;

    const userParameterBase64_sequence&
    userParameterBase64 () const;

    userParameterBase64_sequence&
    userParameterBase64 ();

    void
    userParameterBase64 (const userParameterBase64_sequence& s);

    // Constructors.
    //
    userParameters ();

    userParameters (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    userParameters (const userParameters& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual userParameters*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~userParameters ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    userParameterLong_sequence userParameterLong_;
    userParameterDouble_sequence userParameterDouble_;
    userParameterString_sequence userParameterString_;
    userParameterBase64_sequence userParameterBase64_;
  };

  class accelerationFactorType: public ::xml_schema::type
  {
    public:
    // kspace_encoding_step_1
    // 
    typedef ::xml_schema::unsigned_short kspace_encoding_step_1_type;
    typedef ::xsd::cxx::tree::traits< kspace_encoding_step_1_type, char > kspace_encoding_step_1_traits;

    const kspace_encoding_step_1_type&
    kspace_encoding_step_1 () const;

    kspace_encoding_step_1_type&
    kspace_encoding_step_1 ();

    void
    kspace_encoding_step_1 (const kspace_encoding_step_1_type& x);

    // kspace_encoding_step_2
    // 
    typedef ::xml_schema::unsigned_short kspace_encoding_step_2_type;
    typedef ::xsd::cxx::tree::traits< kspace_encoding_step_2_type, char > kspace_encoding_step_2_traits;

    const kspace_encoding_step_2_type&
    kspace_encoding_step_2 () const;

    kspace_encoding_step_2_type&
    kspace_encoding_step_2 ();

    void
    kspace_encoding_step_2 (const kspace_encoding_step_2_type& x);

    // Constructors.
    //
    accelerationFactorType (const kspace_encoding_step_1_type&,
                            const kspace_encoding_step_2_type&);

    accelerationFactorType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    accelerationFactorType (const accelerationFactorType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual accelerationFactorType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~accelerationFactorType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< kspace_encoding_step_1_type > kspace_encoding_step_1_;
    ::xsd::cxx::tree::one< kspace_encoding_step_2_type > kspace_encoding_step_2_;
  };

  class calibrationModeType: public ::xml_schema::string
  {
    public:
    enum value
    {
      embedded,
      interleaved,
      separate,
      external,
      other
    };

    calibrationModeType (value v);

    calibrationModeType (const char* v);

    calibrationModeType (const ::std::string& v);

    calibrationModeType (const ::xml_schema::string& v);

    calibrationModeType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    calibrationModeType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    calibrationModeType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    calibrationModeType (const calibrationModeType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual calibrationModeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    calibrationModeType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_calibrationModeType_convert ();
    }

    protected:
    value
    _xsd_calibrationModeType_convert () const;

    public:
    static const char* const _xsd_calibrationModeType_literals_[5];
    static const value _xsd_calibrationModeType_indexes_[5];
  };

  class interleavingDimensionType: public ::xml_schema::string
  {
    public:
    enum value
    {
      phase,
      repetition,
      contrast,
      average,
      other
    };

    interleavingDimensionType (value v);

    interleavingDimensionType (const char* v);

    interleavingDimensionType (const ::std::string& v);

    interleavingDimensionType (const ::xml_schema::string& v);

    interleavingDimensionType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    interleavingDimensionType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    interleavingDimensionType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    interleavingDimensionType (const interleavingDimensionType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual interleavingDimensionType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    interleavingDimensionType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_interleavingDimensionType_convert ();
    }

    protected:
    value
    _xsd_interleavingDimensionType_convert () const;

    public:
    static const char* const _xsd_interleavingDimensionType_literals_[5];
    static const value _xsd_interleavingDimensionType_indexes_[5];
  };

  class parallelImagingType: public ::xml_schema::type
  {
    public:
    // accelerationFactor
    // 
    typedef ::ISMRMRD::accelerationFactorType accelerationFactor_type;
    typedef ::xsd::cxx::tree::traits< accelerationFactor_type, char > accelerationFactor_traits;

    const accelerationFactor_type&
    accelerationFactor () const;

    accelerationFactor_type&
    accelerationFactor ();

    void
    accelerationFactor (const accelerationFactor_type& x);

    void
    accelerationFactor (::std::auto_ptr< accelerationFactor_type > p);

    // calibrationMode
    // 
    typedef ::ISMRMRD::calibrationModeType calibrationMode_type;
    typedef ::xsd::cxx::tree::optional< calibrationMode_type > calibrationMode_optional;
    typedef ::xsd::cxx::tree::traits< calibrationMode_type, char > calibrationMode_traits;

    const calibrationMode_optional&
    calibrationMode () const;

    calibrationMode_optional&
    calibrationMode ();

    void
    calibrationMode (const calibrationMode_type& x);

    void
    calibrationMode (const calibrationMode_optional& x);

    void
    calibrationMode (::std::auto_ptr< calibrationMode_type > p);

    // interleavingDimension
    // 
    typedef ::ISMRMRD::interleavingDimensionType interleavingDimension_type;
    typedef ::xsd::cxx::tree::optional< interleavingDimension_type > interleavingDimension_optional;
    typedef ::xsd::cxx::tree::traits< interleavingDimension_type, char > interleavingDimension_traits;

    const interleavingDimension_optional&
    interleavingDimension () const;

    interleavingDimension_optional&
    interleavingDimension ();

    void
    interleavingDimension (const interleavingDimension_type& x);

    void
    interleavingDimension (const interleavingDimension_optional& x);

    void
    interleavingDimension (::std::auto_ptr< interleavingDimension_type > p);

    // Constructors.
    //
    parallelImagingType (const accelerationFactor_type&);

    parallelImagingType (::std::auto_ptr< accelerationFactor_type >&);

    parallelImagingType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    parallelImagingType (const parallelImagingType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual parallelImagingType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~parallelImagingType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< accelerationFactor_type > accelerationFactor_;
    calibrationMode_optional calibrationMode_;
    interleavingDimension_optional interleavingDimension_;
  };

  class patientGender: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    patientGender ();

    patientGender (const char*);

    patientGender (const ::std::string&);

    patientGender (const ::xml_schema::string&);

    patientGender (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    patientGender (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    patientGender (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    patientGender (const patientGender& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual patientGender*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~patientGender ();
  };

  class patientPosition: public ::xml_schema::string
  {
    public:
    enum value
    {
      HFP,
      HFS,
      HFDR,
      HFDL,
      FFP,
      FFS,
      FFDR,
      FFDL
    };

    patientPosition (value v);

    patientPosition (const char* v);

    patientPosition (const ::std::string& v);

    patientPosition (const ::xml_schema::string& v);

    patientPosition (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    patientPosition (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    patientPosition (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    patientPosition (const patientPosition& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual patientPosition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    patientPosition&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_patientPosition_convert ();
    }

    protected:
    value
    _xsd_patientPosition_convert () const;

    public:
    static const char* const _xsd_patientPosition_literals_[8];
    static const value _xsd_patientPosition_indexes_[8];
  };

  class freqEncodingDirection: public ::xml_schema::string
  {
    public:
    enum value
    {
      ROW,
      COL
    };

    freqEncodingDirection (value v);

    freqEncodingDirection (const char* v);

    freqEncodingDirection (const ::std::string& v);

    freqEncodingDirection (const ::xml_schema::string& v);

    freqEncodingDirection (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    freqEncodingDirection (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    freqEncodingDirection (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    freqEncodingDirection (const freqEncodingDirection& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual freqEncodingDirection*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    freqEncodingDirection&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_freqEncodingDirection_convert ();
    }

    protected:
    value
    _xsd_freqEncodingDirection_convert () const;

    public:
    static const char* const _xsd_freqEncodingDirection_literals_[2];
    static const value _xsd_freqEncodingDirection_indexes_[2];
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace ISMRMRD
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace ISMRMRD
{
  // Serialize to std::ostream.
  //

  void
  ismrmrdHeader_ (::std::ostream& os,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  ismrmrdHeader_ (::std::ostream& os,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  ismrmrdHeader_ (::std::ostream& os,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ismrmrdHeader_ (::xercesc::XMLFormatTarget& ft,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  ismrmrdHeader_ (::xercesc::XMLFormatTarget& ft,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  ismrmrdHeader_ (::xercesc::XMLFormatTarget& ft,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ismrmrdHeader_ (::xercesc::DOMDocument& d,
                  const ::ISMRMRD::ismrmrdHeader& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ismrmrdHeader_ (const ::ISMRMRD::ismrmrdHeader& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const ismrmrdHeader&);

  void
  operator<< (::xercesc::DOMElement&, const subjectInformationType&);

  void
  operator<< (::xercesc::DOMElement&, const studyInformationType&);

  void
  operator<< (::xercesc::DOMElement&, const measurementInformationType&);

  void
  operator<< (::xercesc::DOMElement&, const measurementDependencyType&);

  void
  operator<< (::xercesc::DOMElement&, const acquisitionSystemInformationType&);

  void
  operator<< (::xercesc::DOMElement&, const experimentalConditionsType&);

  void
  operator<< (::xercesc::DOMElement&, const encoding&);

  void
  operator<< (::xercesc::DOMElement&, const encodingSpaceType&);

  void
  operator<< (::xercesc::DOMElement&, const matrixSize&);

  void
  operator<< (::xercesc::DOMElement&, const fieldOfView_mm&);

  void
  operator<< (::xercesc::DOMElement&, const limitType&);

  void
  operator<< (::xercesc::DOMElement&, const encodingLimitsType&);

  void
  operator<< (::xercesc::DOMElement&, const trajectoryType&);

  void
  operator<< (::xercesc::DOMAttr&, const trajectoryType&);

  void
  operator<< (::xml_schema::list_stream&,
              const trajectoryType&);

  void
  operator<< (::xercesc::DOMElement&, const trajectoryDescriptionType&);

  void
  operator<< (::xercesc::DOMElement&, const sequenceParametersType&);

  void
  operator<< (::xercesc::DOMElement&, const userParameterLongType&);

  void
  operator<< (::xercesc::DOMElement&, const userParameterDoubleType&);

  void
  operator<< (::xercesc::DOMElement&, const userParameterStringType&);

  void
  operator<< (::xercesc::DOMElement&, const userParameterBase64Type&);

  void
  operator<< (::xercesc::DOMElement&, const dicomParametersType&);

  void
  operator<< (::xercesc::DOMElement&, const referencedImageSequence&);

  void
  operator<< (::xercesc::DOMElement&, const MRImageModule&);

  void
  operator<< (::xercesc::DOMElement&, const userParameters&);

  void
  operator<< (::xercesc::DOMElement&, const accelerationFactorType&);

  void
  operator<< (::xercesc::DOMElement&, const calibrationModeType&);

  void
  operator<< (::xercesc::DOMAttr&, const calibrationModeType&);

  void
  operator<< (::xml_schema::list_stream&,
              const calibrationModeType&);

  void
  operator<< (::xercesc::DOMElement&, const interleavingDimensionType&);

  void
  operator<< (::xercesc::DOMAttr&, const interleavingDimensionType&);

  void
  operator<< (::xml_schema::list_stream&,
              const interleavingDimensionType&);

  void
  operator<< (::xercesc::DOMElement&, const parallelImagingType&);

  void
  operator<< (::xercesc::DOMElement&, const patientGender&);

  void
  operator<< (::xercesc::DOMAttr&, const patientGender&);

  void
  operator<< (::xml_schema::list_stream&,
              const patientGender&);

  void
  operator<< (::xercesc::DOMElement&, const patientPosition&);

  void
  operator<< (::xercesc::DOMAttr&, const patientPosition&);

  void
  operator<< (::xml_schema::list_stream&,
              const patientPosition&);

  void
  operator<< (::xercesc::DOMElement&, const freqEncodingDirection&);

  void
  operator<< (::xercesc::DOMAttr&, const freqEncodingDirection&);

  void
  operator<< (::xml_schema::list_stream&,
              const freqEncodingDirection&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_MAD_ISMRMRD_CODE_BUILD_SCHEMA_ISMRMRD_HXX
