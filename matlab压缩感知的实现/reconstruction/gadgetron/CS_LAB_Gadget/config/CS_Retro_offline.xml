<?xml version="1.0" encoding="UTF-8"?>
<gadgetronStreamConfiguration xsi:schemaLocation="http://gadgetron.sf.net/gadgetron gadgetron.xsd"
		xmlns="http://gadgetron.sf.net/gadgetron"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<!-- read incoming acquisition data : deserialization -->
	<reader>
		<slot>1008</slot>
		<dll>gadgetron_mricore</dll>
		<classname>GadgetIsmrmrdAcquisitionMessageReader</classname>
	</reader>

	<!-- write outgoing image data -->
	<writer>
		<slot>1022</slot>
		<dll>gadgetron_mricore</dll>
		<classname>MRIImageWriter</classname>
	</writer>

	<!-- remove oversampling in offline reconstruction to match final image resolution in readout direction -->
	<gadget>
		<name>RemoveROOversampling</name>
		<dll>gadgetron_mricore</dll>
		<classname>RemoveROOversamplingGadget</classname>
	</gadget>

	<!-- Coil reduction for further processing -->
	<gadget>
		<name>CoilReduction</name>
		<dll>gadgetron_mricore</dll>
		<classname>CoilReductionGadget</classname>
		<!-- Keep a max of 16 coils -->
		<property><name>coils_out</name><value>16</value></property>
	</gadget>

	<!-- first try - normal AccumulatorGadget -->
	<gadget>
		<name>Accumulator</name>
		<dll>CS_LAB</dll>
		<classname>CS_Retro_AccumulatorGadget</classname>
		<property><name>NavPeriod</name><value>200</value></property>
		<property><name>NavPERes</name><value>8</value></property>
		<property><name>CardiacPhases</name><value>12</value></property>
		<property><name>RespiratoryPhases</name><value>4</value></property>
	</gadget>

<!-- Calculate navigator signal - Choose either classical or PCA algorithm -->
	<gadget>
		<name>Navigator</name>
		<dll>CS_LAB</dll>
		<classname>CS_Retro_NavigatorGadget</classname>

		<property>
			<!-- minimal cardial frequency (1/min) (PCA algorithm only) -->
			<name>MinCardFreq</name>
			<value>40.0</value>
		</property>
		<property>
			<!-- maximal cardial frequency (1/min) (PCA algorithm only) -->
			<name>MaxCardFreq</name>
			<value>150.0</value>
		</property>
		<property>
			<!-- minimal raspiratory frequency (1/min) (PCA algorithm only) -->
			<name>MinRespFreq</name>
			<value>6</value>
		</property>
		<property>
			<!-- maximal raspiratory frequency (1/min) (PCA algorithm only) -->
			<name>MaxRespFreq</name>
			<value>40.0</value>
		</property>
		<property>
			<!-- 0: classical, 1: PCA -->
			<name>NavigationMethod</name>
			<value>0</value>
		</property>
	</gadget>

<!-- k-space gating - Choose either closest or gaussian weighted -->
<!-- 	CS_Retro_PopulationGadget -->
	<gadget>
		<name>Gating</name>
		<dll>CS_LAB</dll>
		<classname>CS_Retro_PopulationGadget</classname>

		<property>
			<!-- cardiac weighting tolerance factor -->
			<name>CardiacTolerance</name>
			<value>2.0</value>
		</property>
		<property>
			<!-- respiratory weighting tolerance factor -->
			<name>RespiratoryTolerance</name>
			<value>2.0</value>
		</property>
		<property>
			<!-- 0: closest, 1: average, 2: collect (not impl.), 3: gauss -->
			<name>PopulationMode</name>
			<value>0</value>
		</property>
		<property>
			<!-- 0: PanTompkin, 1: Wavelet (not impl.), 2: WaveletPanTomp (not impl.) -->
			<name>RPeakDetection</name>
			<value>0</value>
		</property>
		<property>
			<!-- 0: linear, 1: diastole -->
			<name>CardiacGatingMode</name>
			<value>0</value>
		</property>
		<property>
			<!-- 0: percentile, 1: k-means (not impl.) -->
			<name>RespiratoryGatingMode</name>
			<value>0</value>
		</property>
		<property>
			<!-- [0,1] (0: none, 1: use complete fully sampled center) -->
			<name>LowResVS</name>
			<value>0.5</value>
		</property>
		<property>
			<!-- 0: False, 1: True -->
			<name>OmitCenterVS</name>
			<value>1</value>
		</property>
	</gadget>

	<gadget>
		<name>Splitter</name>
		<dll>CS_LAB</dll>
		<classname>CS_Retro_ImageSplitterGadget</classname>

		<property>
			<!-- Amout of simultaneous cardiac phases. 0 means all at once -->
			<name>SimultaneousCardiacPhases</name>
			<value>0</value>
		</property>
		<property>
			<!-- Amout of simultaneous respiratory phases. 0 means all at once -->
			<name>SimultaneousRespiratoryPhases</name>
			<value>0</value>
		</property>
	</gadget>

<!-- CS reconstruction - Choose either FOCUSS or BART -->
<!-- 	FOCUSS-Toolchain -->
	<!-- Notes on FOCUSS-Gadget -->
		<!-- FOCUSS iterations - default: 2 									-->
		<!-- CG Iterations - default: 20 										-->
		<!-- Lambda - default: 0.01 											-->
		<!-- Lambda ESPReSSo - default: 0.02 									-->
		<!-- Kernel FFT dimensions - bit-mask - 1:x, 2:y,						-->
		<!-- Kernel Sparsifying dimensions - bit-mask - 1:x, 2:y, 				-->
		<!-- Sparsifying Transform for each direction 							-->
		<!-- KernelTrafo - is kSpace trafo active 								-->
		<!-- fft in read direction 												-->
		<!-- FOCUSS output: kSpace = 1, Image = 0 								-->
		<!-- use ESPReSSo constraint for normal CS acquisitions - default: 0	-->
	<!-- Notes on Combine-Gadget -->
		<!-- combine the channel data to one image - Mode 0: Unweighted Combine (CPLX data) - 1: Selfweighted Combine (real data only!) -->
	<!--<gadget>
		<name>FOCUSS</name>
		<dll>CS_LAB</dll>
		<classname>CS_LAB</classname>
		<property><name>bXMLControl</name><value>1</value></property>
		<property><name>lambda</name><value>0.1</value></property>
		<property><name>lambdaESPReSSo</name><value>0</value></property>
		<property><name>OuterIterations</name><value>2</value></property>
		<property><name>InnerIterations</name><value>2</value></property>
		<property><name>kernelFftDim</name><value>10</value></property>
		<property><name>fftSparseDim</name><value>10</value></property>
		<property><name>dctSparseDim</name><value>0</value></property>
		<property><name>scrambleDim</name><value>10</value></property>
		<property><name>transformFftBaDim</name><value>4</value></property>
		<property><name>kSpaceOutDim</name><value>0</value></property>
		<property><name>CSESPReSSo</name><value>0</value></property>
		<property><name>norm</name><value>1</value></property>
	</gadget>
	<gadget>
		<name>Combine</name>
		<dll>CS_LAB</dll>
		<classname>CS_CombineGadget</classname>
	</gadget>-->

<!-- 	BART-Toolchain -->
	<!-- Notes on CS_MRIImageToAcquisitionGadget -->
		<!-- Reset AcquisitionHeader instead of ImageHeader -->
	<!-- Notes on CS_Retro_PreBARTGadget -->
		<!-- Convert Gadget2 to Gadget1 -->
	<!-- Notes on PrepRef -->
		<!-- Some Notes:																						-->
		<!-- debug_folder, perform_timing, verbose:	parameters for debug and timing								-->
		<!-- average_all_ref_N:						averaging across repetition									-->
		<!-- average_all_ref_S:						every set has its own kernels								-->
		<!-- prepare_ref_always:					whether always to prepare ref if no acceleration is used	-->
	<!-- Notes on CS_Retro_PostBARTGadget -->
		<!-- Re-convert Gadget1 to Gadget2 -->
	<gadget>
		<name>Pre BART</name>
		<dll>CS_LAB</dll>
		<classname>CS_Retro_PreBARTGadget</classname>
	</gadget>
	<gadget>
		<name>PrepRef</name>
		<dll>gadgetron_mricore</dll>
		<classname>GenericReconCartesianReferencePrepGadget</classname>

		<property><name>debug_folder</name><value></value></property>
		<property><name>perform_timing</name><value>true</value></property>
		<property><name>verbose</name><value>true</value></property>

		<property><name>average_all_ref_N</name><value>true</value></property>
		<property><name>average_all_ref_S</name><value>false</value></property>
		<property><name>prepare_ref_always</name><value>true</value></property>
	</gadget>
	<gadget>
		<name>BART</name>
		<dll>gadgetron_bart</dll>
		<classname>BartGadget</classname>
		<property><name>isVerboseON</name><value>true</value></property>
		<property><name>BartCommandScript_name</name><value>CS_LAB_BART_Recon.sh</value></property>
		<property><name>isBartFileBeingStored</name><value>false</value></property>
		<property><name>image_series</name><value>0</value></property>
	</gadget>
	<gadget>
		<name>Post BART</name>
		<dll>CS_LAB</dll>
		<classname>CS_Retro_PostBARTGadget</classname>
	</gadget>

	<gadget>
		<name>Combiner</name>
		<dll>CS_LAB</dll>
		<classname>CS_Retro_ImageCombinerGadget</classname>
	</gadget>

	<!-- extract components like (magnitude: 1, real: 2, imag: 4, phase:8 or combine: 9 for magnitude and phase) -->
	<gadget>
		<name>Extract</name>
		<dll>gadgetron_mricore</dll>
		<classname>ExtractGadget</classname>
		<property>
			<name>extract_mask</name>
			<value>1</value>
		</property>
	</gadget>

<!-- image registration - choose either elastix or LAP -->
<!-- 	ElastixRegistrationGadget -->
	<!--<gadget>
		<name>ElastixRegistration</name>
		<dll>CS_LAB</dll>
		<classname>ElastixRegistrationGadget</classname>

		<property>
			<name>LogOutput</name>
			<value>false</value>
		</property>
		<property>
			<name>PathParam</name>
			<value>/usr/local/share/gadgetron/elastix/elastix_DEFAULT.txt</value>
		</property>
		<property>
			<name>PathLog</name>
			<value>/tmp/</value>
		</property>
	</gadget>-->

<!-- 	LAPRegistrationGadget -->
	<gadget>
		<name>LAPRegistration</name>
		<dll>CS_LAB</dll>
		<classname>LAPRegistrationGadget</classname>

		<property>
			<name>LvlMin</name>
			<value>0</value>
		</property>
		<property>
			<name>LvlMax</name>
			<value>4</value>
		</property>
	</gadget>

	<!-- brings the 5D image [x y z resp_phases card_phases] to a format which can be saved by Gadgetron -->
	<gadget>
		<name>ImageFormatForSaving</name>
		<dll>CS_LAB</dll>
		<classname>CS_Retro_ImageFormatForSavingGadget</classname>
	</gadget>

	<gadget>
		<name>ImageFinish</name>
		<dll>gadgetron_mricore</dll>
		<classname>ImageFinishGadget</classname>
	</gadget>
</gadgetronStreamConfiguration>
